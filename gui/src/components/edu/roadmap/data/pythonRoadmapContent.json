{
  "python-start": {
    "title": "파이썬 시작하기",
    "description": "개발 환경 설정 및 기초",
    "content": "# 파이썬 시작하기\n\n## 개발 환경 설정\n파이썬은 다양한 환경에서 개발할 수 있습니다. 먼저 Python.org에서 최신 버전의 파이썬을 다운로드하고 설치해야 합니다. 현재는 Python 3.x 버전을 사용하는 것이 권장됩니다.\n\n## Python IDLE\n파이썬 설치 시 기본적으로 제공되는 통합 개발 환경입니다. 간단한 코드 작성과 실행에 적합합니다.\n\n## 코드 에디터\nVS Code, PyCharm, Sublime Text 등의 코드 에디터를 사용하면 좀 더 효율적으로 코드를 작성할 수 있습니다.\n\n## 첫 번째 프로그램\n```python\nprint('Hello, World!')\n```\n\n이 코드를 실행하면 콘솔에 'Hello, World!'가 출력됩니다.",
    "resources": [
      {
        "title": "Python 공식 사이트",
        "url": "https://www.python.org"
      },
      {
        "title": "VS Code 설치",
        "url": "https://code.visualstudio.com"
      }
    ],
    "challenges": [
      {
        "title": "개발 환경 설정",
        "description": "Python과 코드 에디터를 설치하고 'Hello, World!' 프로그램을 실행해보세요."
      }
    ]
  },
  "env-setup": {
    "title": "환경 설정",
    "description": "Python 설치 및 IDE 선택",
    "content": "# Python 환경 설정\n\n## 파이썬 설치\n1. [Python.org](https://www.python.org/downloads/)에서 최신 버전 다운로드\n2. 설치 시 'Add Python to PATH' 옵션 체크\n3. 설치 완료 후 명령 프롬프트에서 `python --version` 명령어로 확인\n\n## 가상 환경 설정\n```bash\n# 가상 환경 생성\npython -m venv myenv\n\n# 가상 환경 활성화 (Windows)\nmyenv\\Scripts\\activate\n\n# 가상 환경 활성화 (macOS/Linux)\nsource myenv/bin/activate\n```\n\n## IDE 선택\n- **Visual Studio Code**: 가볍고 확장성이 좋음\n- **PyCharm**: 파이썬 전용 풍부한 기능 제공\n- **Jupyter Notebook**: 데이터 분석 및 시각화에 적합",
    "resources": [
      {
        "title": "Visual Studio Code 파이썬 설정 가이드",
        "url": "https://code.visualstudio.com/docs/python/python-tutorial"
      },
      {
        "title": "파이썬 가상 환경 가이드",
        "url": "https://docs.python.org/ko/3/tutorial/venv.html"
      }
    ],
    "challenges": [
      {
        "title": "환경 구성하기",
        "description": "파이썬과 선택한 IDE를 설치한 후, 가상 환경을 생성하고 활성화해보세요."
      }
    ]
  },
  "hello-world": {
    "title": "Hello World",
    "description": "첫 번째 파이썬 프로그램",
    "content": "# Hello World\n\n파이썬에서 가장 간단한 프로그램은 'Hello, World!'를 출력하는 것입니다. 이는 개발 환경이 제대로 설정되었는지 확인하는 데 유용합니다.\n\n## 코드 예제\n```python\nprint('Hello, World!')\n```\n\n## 설명\n- `print()` 함수는 괄호 안의 내용을 콘솔에 출력합니다.\n- 작은따옴표(' ') 또는 큰따옴표(\" \")로 문자열을 감쌉니다.\n\n## 실행 방법\n1. 파이썬 파일(`.py`)을 생성합니다.\n2. 위 코드를 파일에 작성합니다.\n3. 명령 프롬프트에서 `python 파일명.py`로 실행합니다.\n\n## 변형\n```python\nname = input('이름을 입력하세요: ')\nprint(f'Hello, {name}!')\n```\n\n이 코드는 사용자로부터 이름을 입력받아 인사말을 출력합니다.",
    "resources": [
      {
        "title": "파이썬 print 함수",
        "url": "https://docs.python.org/ko/3/library/functions.html#print"
      }
    ],
    "challenges": [
      {
        "title": "인사말 출력",
        "description": "사용자로부터 이름을 입력받아 'Hello, [이름]!' 형식으로 출력하는 프로그램을 작성하세요."
      }
    ]
  },
  "python-basics": {
    "title": "기본 문법",
    "description": "파이썬 프로그래밍의 기초",
    "content": "# 파이썬 기본 문법\n\n## 변수와 데이터 타입\n```python\n# 변수 할당\nname = \"Python\"\nage = 30\nis_programming = True\n\n# 데이터 타입\nprint(type(name))          # <class 'str'>\nprint(type(age))           # <class 'int'>\nprint(type(is_programming)) # <class 'bool'>\n```\n\n## 조건문\n```python\nif age > 18:\n    print(\"성인입니다\")\nelif age > 13:\n    print(\"청소년입니다\")\nelse:\n    print(\"어린이입니다\")\n```\n\n## 반복문\n```python\n# for 반복문\nfor i in range(5):\n    print(i)  # 0부터 4까지 출력\n\n# while 반복문\ncount = 0\nwhile count < 5:\n    print(count)\n    count += 1\n```\n\n## 입출력\n```python\n# 입력 받기\nuser_input = input(\"이름을 입력하세요: \")\n\n# 출력하기\nprint(f\"안녕하세요, {user_input}님!\")\n```",
    "resources": [
      {
        "title": "파이썬 공식 튜토리얼",
        "url": "https://docs.python.org/ko/3/tutorial/index.html"
      },
      {
        "title": "점프 투 파이썬",
        "url": "https://wikidocs.net/book/1"
      }
    ],
    "challenges": [
      {
        "title": "구구단 출력",
        "description": "중첩 반복문을 사용하여 2단부터 9단까지의 구구단을 출력하는 프로그램을 작성해보세요."
      },
      {
        "title": "소수 판별기",
        "description": "사용자로부터 숫자를 입력받아 소수인지 판별하는 프로그램을 작성해보세요."
      }
    ]
  },
  "variables": {
    "title": "변수와 자료형",
    "description": "변수 선언과 기본 자료형",
    "content": "# 파이썬 변수와 자료형\n\n## 변수\n변수는 데이터를 저장하는 메모리 공간의 이름입니다.\n\n### 선언과 할당\n```python\nx = 10\nname = \"Python\"\nis_active = True\n```\n\n### 명명 규칙\n- 문자, 숫자, 밑줄(_)로 구성\n- 숫자로 시작 불가\n- 대소문자 구분\n- 예약어 사용 불가\n\n## 기본 자료형\n\n### 정수(int)\n```python\na = 42\nb = -100\n```\n\n### 실수(float)\n```python\npi = 3.14\nzero = 0.0\n```\n\n### 문자열(str)\n```python\ns1 = 'Hello'\ns2 = \"World\"\n```\n\n### 불리언(bool)\n```python\nt = True\nf = False\n```\n\n### NoneType\n```python\nn = None\n```\n\n## 자료형 확인\n```python\nprint(type(x))  # <class 'int'>\n```",
    "resources": [
      {
        "title": "파이썬 변수 - W3Schools",
        "url": "https://www.w3schools.com/python/python_variables.asp"
      },
      {
        "title": "파이썬 자료형 - 프로그래머스",
        "url": "https://programmers.co.kr/learn/courses/2/lessons/72"
      }
    ],
    "challenges": [
      {
        "title": "변수 교환",
        "description": "두 변수의 값을 교환하는 프로그램을 작성하세요. (임시 변수를 사용하거나 파이썬의 다중 할당을 활용)"
      }
    ]
  },
  "operators": {
    "title": "연산자",
    "description": "산술, 비교, 논리 연산자",
    "content": "# 파이썬 연산자\n\n## 산술 연산자\n```python\na = 10\nb = 3\n\nprint(a + b)    # 13\nprint(a - b)    # 7\nprint(a * b)    # 30\nprint(a / b)    # 3.3333...\nprint(a // b)   # 3 (몫)\nprint(a % b)    # 1 (나머지)\nprint(a ** b)   # 1000 (거듭제곱)\n```\n\n## 비교 연산자\n```python\nx = 5\ny = 3\n\nprint(x == y)   # False\nprint(x != y)   # True\nprint(x > y)    # True\nprint(x < y)    # False\nprint(x >= y)   # True\nprint(x <= y)   # False\n```\n\n## 논리 연산자\n```python\na = True\nb = False\n\nprint(a and b)  # False\nprint(a or b)   # True\nprint(not a)    # False\n```\n\n## 비트 연산자\n```python\nx = 10  # 1010 in binary\ny = 4   # 0100 in binary\n\nprint(x & y)    # 0 (AND)\nprint(x | y)    # 14 (OR)\nprint(x ^ y)    # 14 (XOR)\nprint(~x)       # -11 (NOT)\nprint(x << 2)   # 40 (left shift)\nprint(x >> 2)   # 2 (right shift)\n```",
    "resources": [
      {
        "title": "파이썬 연산자 - W3Schools",
        "url": "https://www.w3schools.com/python/python_operators.asp"
      }
    ],
    "challenges": [
      {
        "title": "연산자 활용",
        "description": "사용자로부터 두 개의 정수를 입력받아 산술 연산 결과를 모두 출력하는 프로그램을 작성하세요."
      }
    ]
  },
  "conditionals": {
    "title": "조건문",
    "description": "if, else, elif 구문",
    "content": "# 파이썬 조건문\n\n조건문은 특정 조건에 따라 다른 코드를 실행하도록 합니다.\n\n## 기본 구조\n```python\nif condition:\n    # condition이 True일 때 실행\nelif another_condition:\n    # another_condition이 True일 때 실행\nelse:\n    # 모든 조건이 False일 때 실행\n```\n\n## 예제\n```python\nage = 25\n\nif age < 13:\n    print(\"어린이입니다\")\nelif age < 20:\n    print(\"청소년입니다\")\nelse:\n    print(\"성인입니다\")\n```\n\n## 중첩 조건문\n```python\nif age >= 20:\n    if age < 65:\n        print(\"성인입니다\")\n    else:\n        print(\"노인입니다\")\nelse:\n    print(\"미성년자입니다\")\n```\n\n## 한 줄 조건문\n```python\nstatus = \"성인\" if age >= 18 else \"미성년자\"\n```",
    "resources": [
      {
        "title": "파이썬 조건문 - 공식 문서",
        "url": "https://docs.python.org/ko/3/tutorial/controlflow.html#if-statements"
      }
    ],
    "challenges": [
      {
        "title": "윤년 판별",
        "description": "사용자로부터 연도를 입력받아 윤년인지 판별하는 프로그램을 작성하세요. (윤년 규칙: 4로 나누어 떨어지고, 100으로 나누어 떨어지지 않거나 400으로 나누어 떨어지는 연도)"
      }
    ]
  },
  "loops": {
    "title": "반복문",
    "description": "for, while 반복문",
    "content": "# 파이썬 반복문\n\n반복문은 코드 블록을 여러 번 실행할 수 있게 해줍니다.\n\n## for 반복문\n```python\n# 범위 반복\nfor i in range(5):\n    print(i)  # 0, 1, 2, 3, 4\n\n# 컬렉션 반복\nfruits = [\"사과\", \"바나나\", \"체리\"]\nfor fruit in fruits:\n    print(fruit)\n\n# 인덱스와 함께 반복\nfor index, value in enumerate(fruits):\n    print(f\"{index}: {value}\")\n```\n\n## while 반복문\n```python\ncount = 0\nwhile count < 5:\n    print(count)\n    count += 1\n\n# 무한 루프와 break\nwhile True:\n    user_input = input(\"종료하려면 'q'를 입력하세요: \")\n    if user_input == 'q':\n        break\n```\n\n## 흐름 제어\n```python\n# continue: 현재 반복 건너뛰기\nfor i in range(10):\n    if i % 2 == 0:\n        continue\n    print(i)  # 1, 3, 5, 7, 9\n\n# break: 반복문 종료\nfor i in range(10):\n    if i == 5:\n        break\n    print(i)  # 0, 1, 2, 3, 4\n```",
    "resources": [
      {
        "title": "파이썬 for 반복문",
        "url": "https://docs.python.org/ko/3/tutorial/controlflow.html#for-statements"
      },
      {
        "title": "파이썬 while 반복문",
        "url": "https://docs.python.org/ko/3/reference/compound_stmts.html#the-while-statement"
      }
    ],
    "challenges": [
      {
        "title": "피보나치 수열",
        "description": "사용자로부터 n을 입력받아 n번째 피보나치 수를 구하는 프로그램을 작성하세요."
      }
    ]
  },
  "data-structures": {
    "title": "자료 구조",
    "description": "파이썬의 주요 자료구조",
    "content": "# 파이썬 자료구조\n\n파이썬에는 다양한 내장 자료구조가 있습니다. 각 자료구조는 특정 용도에 맞게 최적화되어 있습니다.\n\n## 주요 자료구조\n\n- **리스트(List)**: 순서가 있는 컬렉션, 변경 가능\n- **튜플(Tuple)**: 순서가 있는 컬렉션, 변경 불가능\n- **세트(Set)**: 순서가 없고 중복이 없는 컬렉션\n- **딕셔너리(Dictionary)**: 키-값 쌍의 컬렉션\n\n## 자료구조 선택\n\n- 순서가 중요하고 데이터가 자주 변경된다면: 리스트\n- 순서가 중요하고 데이터가 변경되지 않는다면: 튜플\n- 중복 제거가 필요하다면: 세트\n- 키를 통한 빠른 조회가 필요하다면: 딕셔너리",
    "resources": [
      {
        "title": "파이썬 자료구조 개요",
        "url": "https://docs.python.org/ko/3/tutorial/datastructures.html"
      },
      {
        "title": "파이썬 컬렉션 모듈",
        "url": "https://docs.python.org/ko/3/library/collections.html"
      }
    ],
    "challenges": [
      {
        "title": "데이터 변환",
        "description": "주어진 리스트에서 중복을 제거하고 빈도수가 높은 요소부터 정렬하는 함수를 작성하세요."
      }
    ]
  },
  "lists": {
    "title": "리스트",
    "description": "순서가 있는 컬렉션",
    "content": "# 파이썬 리스트\n\n리스트는 순서가 있고 변경 가능한 컬렉션입니다. 다양한 데이터 타입을 하나의 리스트에 저장할 수 있습니다.\n\n## 리스트 생성\n```python\n# 빈 리스트\nempty_list = []\n\n# 값이 있는 리스트\nnumbers = [1, 2, 3, 4, 5]\nmixed = [1, \"hello\", 3.14, True]\n\n# 리스트 생성자\nlist_from_string = list(\"hello\")  # ['h', 'e', 'l', 'l', 'o']\n```\n\n## 리스트 접근 및 수정\n```python\nnumbers = [10, 20, 30, 40, 50]\n\n# 인덱싱\nprint(numbers[0])    # 10 (첫 번째 요소)\nprint(numbers[-1])   # 50 (마지막 요소)\n\n# 슬라이싱\nprint(numbers[1:3])  # [20, 30]\nprint(numbers[:2])   # [10, 20]\nprint(numbers[2:])   # [30, 40, 50]\n\n# 수정\nnumbers[0] = 100\nprint(numbers)       # [100, 20, 30, 40, 50]\n```\n\n## 리스트 메소드\n```python\nnumbers = [1, 2, 3]\n\n# 요소 추가\nnumbers.append(4)        # [1, 2, 3, 4]\nnumbers.insert(0, 0)      # [0, 1, 2, 3, 4]\nnumbers.extend([5, 6])    # [0, 1, 2, 3, 4, 5, 6]\n\n# 요소 제거\nnumbers.remove(3)         # [0, 1, 2, 4, 5, 6]\npopped = numbers.pop()    # 6, numbers = [0, 1, 2, 4, 5]\npopped = numbers.pop(0)   # 0, numbers = [1, 2, 4, 5]\n\n# 기타 메소드\nprint(numbers.index(4))   # 2 (4의 인덱스)\nprint(numbers.count(1))   # 1 (1의 개수)\nnumbers.sort()            # [1, 2, 4, 5] (정렬)\nnumbers.reverse()         # [5, 4, 2, 1] (역순)\nnumbers.clear()           # [] (모든 요소 제거)\n```\n\n## 리스트 이해하기 (List Comprehension)\n```python\n# 0부터 9까지의 제곱 리스트\nsquares = [x**2 for x in range(10)]\n\n# 조건부 리스트 이해하기\neven_squares = [x**2 for x in range(10) if x % 2 == 0]\n```\n\n## 다차원 리스트\n```python\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(matrix[1][1])  # 5\n```",
    "resources": [
      {
        "title": "파이썬 리스트 - W3Schools",
        "url": "https://www.w3schools.com/python/python_lists.asp"
      }
    ],
    "challenges": [
      {
        "title": "리스트 처리",
        "description": "두 개의 정수 리스트를 입력으로 받아 교집합, 합집합, 차집합을 리스트로 반환하는 함수를 작성하세요."
      },
      {
        "title": "행렬 연산",
        "description": "두 개의 2차원 리스트(행렬)를 입력으로 받아 행렬 덧셈을 수행하는 함수를 작성하세요."
      }
    ]
  },
  "tuples": {
    "title": "튜플",
    "description": "변경 불가능한 순서 있는 컬렉션",
    "content": "# 파이썬 튜플\n\n튜플은 순서가 있고 변경 불가능한 컬렉션입니다. 소괄호로 정의합니다.\n\n## 튜플 생성\n```python\n# 빈 튜플\nempty_tuple = ()\n\n# 값이 있는 튜플\npoint = (3, 4)\ncolors = ('red', 'green', 'blue')\n\n# 단일 요소 튜플\nsingle = (42,)\n```\n\n## 튜플 접근\n```python\npoint = (3, 4)\n\nprint(point[0])  # 3\nprint(point[1])  # 4\n\n# 튜플 언패킹\ntuple_x, tuple_y = point\nprint(tuple_x, tuple_y)  # 3 4\n```\n\n## 튜플의 불변성\n```python\n# 튜플은 변경 불가\n# point[0] = 5  # TypeError: 'tuple' object does not support item assignment\n```\n\n## 튜플 사용 사례\n- 함수에서 여러 값을 반환할 때\n- 고정된 데이터를 저장할 때\n- 딕셔너리의 키로 사용할 때",
    "resources": [
      {
        "title": "파이썬 튜플 - W3Schools",
        "url": "https://www.w3schools.com/python/python_tuples.asp"
      }
    ],
    "challenges": [
      {
        "title": "튜플 활용",
        "description": "좌표를 튜플로 받아 두 점 사이의 거리를 계산하는 함수를 작성하세요."
      }
    ]
  },
  "dictionaries": {
    "title": "딕셔너리",
    "description": "키-값 쌍 컬렉션",
    "content": "# 파이썬 딕셔너리\n\n딕셔너리는 키-값 쌍을 저장하는 변경 가능한 컬렉션입니다. 중괄호로 정의합니다.\n\n## 딕셔너리 생성\n```python\n# 빈 딕셔너리\nempty_dict = {}\n\n# 값이 있는 딕셔너리\nperson = {'name': 'Alice', 'age': 30, 'city': 'Seoul'}\n\n# dict() 생성자\nperson2 = dict(name='Bob', age=25)\n```\n\n## 딕셔너리 접근 및 수정\n```python\nperson = {'name': 'Alice', 'age': 30}\n\n# 키로 접근\nprint(person['name'])  # 'Alice'\n\n# 없을 경우 KeyError 발생\n# print(person['address'])  # KeyError\n\n# get() 메소드 사용\nprint(person.get('age'))        # 30\nprint(person.get('address', 'Unknown'))  # 'Unknown'\n\n# 수정 및 추가\nperson['age'] = 31\nperson['job'] = 'Engineer'\n```\n\n## 딕셔너리 메소드\n```python\n# 키 목록\nprint(person.keys())    # dict_keys(['name', 'age', 'job'])\n\n# 값 목록\nprint(person.values())  # dict_values(['Alice', 31, 'Engineer'])\n\n# 키-값 쌍\nprint(person.items())   # dict_items([('name', 'Alice'), ('age', 31), ('job', 'Engineer')])\n\n# 제거\nage = person.pop('age')  # 31, person = {'name': 'Alice', 'job': 'Engineer'}\n```\n\n## 딕셔너리 이해하기 (Dictionary Comprehension)\n```python\nsquares = {x: x**2 for x in range(5)}\n# {0: 0, 1: 1, 2: 4, 3: 9, 4: 16}\n```",
    "resources": [
      {
        "title": "파이썬 딕셔너리 - W3Schools",
        "url": "https://www.w3schools.com/python/python_dictionaries.asp"
      }
    ],
    "challenges": [
      {
        "title": "딕셔너리 활용",
        "description": "사용자로부터 단어와 뜻을 입력받아 딕셔너리에 저장하고, 특정 단어의 뜻을 출력하는 프로그램을 작성하세요."
      }
    ]
  },
  "sets": {
    "title": "집합",
    "description": "중복되지 않는 요소 모음",
    "content": "# 파이썬 집합\n\n집합은 순서가 없고 중복이 없는 컬렉션입니다. 중괄호로 정의합니다.\n\n## 집합 생성\n```python\n# 빈 집합\nempty_set = set()\n\n# 값이 있는 집합\nnumbers = {1, 2, 3, 4, 5}\n\n# 중복된 값은 자동 제거\nunique_numbers = {1, 2, 2, 3, 3, 3}  # {1, 2, 3}\n```\n\n## 집합 연산\n```python\na = {1, 2, 3, 4}\nb = {3, 4, 5, 6}\n\n# 합집합\nprint(a | b)  # {1, 2, 3, 4, 5, 6}\n\n# 교집합\nprint(a & b)  # {3, 4}\n\n# 차집합\nprint(a - b)  # {1, 2}\n\n# 대칭 차집합\nprint(a ^ b)  # {1, 2, 5, 6}\n```\n\n## 집합 메소드\n```python\nnumbers = {1, 2, 3}\n\n# 요소 추가\nnumbers.add(4)  # {1, 2, 3, 4}\n\n# 여러 요소 추가\nnumbers.update([5, 6])  # {1, 2, 3, 4, 5, 6}\n\n# 요소 제거\nnumbers.remove(3)  # {1, 2, 4, 5, 6}\n\n# discard는 요소가 없어도 오류 없음\nnumbers.discard(10)  # {1, 2, 4, 5, 6}\n\n# pop: 임의의 요소 제거\npopped = numbers.pop()  # 예: 1, numbers = {2, 4, 5, 6}\n```",
    "resources": [
      {
        "title": "파이썬 집합 - W3Schools",
        "url": "https://www.w3schools.com/python/python_sets.asp"
      }
    ],
    "challenges": [
      {
        "title": "집합 연산",
        "description": "두 개의 문자열을 입력받아 공통된 문자를 집합으로 반환하는 프로그램을 작성하세요."
      }
    ]
  },
  "functions": {
    "title": "함수",
    "description": "코드 재사용을 위한 블록",
    "content": "# 파이썬 함수\n\n함수는 재사용 가능한 코드 블록으로, 특정 작업을 수행합니다.\n\n## 함수 정의\n```python\ndef greet(name):\n    return f\"Hello, {name}!\"\n\n# 함수 호출\nprint(greet(\"Alice\"))  # \"Hello, Alice!\"\n```\n\n## 매개변수\n```python\n# 위치 인자\ndef add(a, b):\n    return a + b\n\nprint(add(3, 4))  # 7\n\n# 기본값 매개변수\ndef greet(name=\"Guest\"):\n    return f\"Hello, {name}!\"\n\nprint(greet())      # \"Hello, Guest!\"\n\n# 가변 인자 (*args)\ndef sum_all(*numbers):\n    return sum(numbers)\n\nprint(sum_all(1, 2, 3))  # 6\n\n# 키워드 가변 인자 (**kwargs)\ndef print_info(**info):\n    for key, value in info.items():\n        print(f\"{key}: {value}\")\n\nprint_info(name=\"Alice\", age=30)\n# name: Alice\n# age: 30\n```\n\n## 반환 값\n```python\ndef divide(a, b):\n    if b == 0:\n        return \"Error: Division by zero\"\n    return a / b\n\nprint(divide(10, 2))  # 5.0\nprint(divide(10, 0))  # \"Error: Division by zero\"\n```",
    "resources": [
      {
        "title": "파이썬 함수 - 공식 문서",
        "url": "https://docs.python.org/ko/3/tutorial/controlflow.html#defining-functions"
      }
    ],
    "challenges": [
      {
        "title": "함수 구현",
        "description": "입력된 숫자의 팩토리얼을 계산하는 재귀 함수를 작성하세요."
      }
    ]
  },
  "function-basics": {
    "title": "함수 기초",
    "description": "함수 선언과 호출",
    "content": "# 함수 기초\n\n## 함수 정의\n```python\ndef function_name(parameters):\n    # 코드 블록\n    return value\n```\n\n## 함수 호출\n```python\nresult = function_name(arguments)\n```\n\n## 예제\n```python\ndef square(x):\n    return x ** 2\n\nprint(square(5))  # 25\n```",
    "resources": [
      {
        "title": "파이썬 함수 기초",
        "url": "https://wikidocs.net/24"
      }
    ],
    "challenges": [
      {
        "title": "간단한 함수",
        "description": "입력된 숫자의 제곱을 반환하는 함수를 작성하세요."
      }
    ]
  },
  "arguments": {
    "title": "매개변수",
    "description": "위치 및 키워드 인자",
    "content": "# 함수 매개변수\n\n## 위치 인자\n```python\ndef greet(first_name, last_name):\n    return f\"Hello, {first_name} {last_name}!\"\n\nprint(greet(\"Alice\", \"Smith\"))  # \"Hello, Alice Smith!\"\n```\n\n## 키워드 인자\n```python\ndef greet(first_name, last_name):\n    return f\"Hello, {first_name} {last_name}!\"\n\nprint(greet(last_name=\"Smith\", first_name=\"Alice\"))  # \"Hello, Alice Smith!\"\n```",
    "resources": [
      {
        "title": "파이썬 함수 인자",
        "url": "https://docs.python.org/ko/3/tutorial/controlflow.html#more-on-defining-functions"
      }
    ],
    "challenges": [
      {
        "title": "매개변수 활용",
        "description": "위치 인자와 키워드 인자를 혼합하여 사용하는 함수를 작성하세요."
      }
    ]
  },
  "return-values": {
    "title": "반환 값",
    "description": "함수에서 값 반환하기",
    "content": "# 함수 반환 값\n\n## 기본 개념\n함수는 `return` 키워드를 사용하여 값을 호출자에게 반환합니다. `return`이 없는 함수는 `None`을 반환합니다.\n\n## 예제\n```python\ndef add(a, b):\n    return a + b\n\nresult = add(3, 5)  # result = 8\n\n# 여러 값 반환 (튜플로 반환)\ndef get_person():\n    name = \"Alice\"\n    age = 30\n    return name, age\n\nperson_name, person_age = get_person()\n```",
    "resources": [
      {
        "title": "파이썬 반환 값",
        "url": "https://docs.python.org/ko/3/tutorial/controlflow.html#defining-functions"
      }
    ],
    "challenges": [
      {
        "title": "여러 값 반환",
        "description": "두 개의 문자열을 입력받아 길이를 비교하고 더 긴 문자열과 그 길이를 반환하는 함수를 작성하세요."
      }
    ]
  },
  "oop": {
    "title": "객체지향 프로그래밍",
    "description": "클래스와 객체 활용",
    "content": "# 객체지향 프로그래밍 (OOP)\n\nOOP는 프로그램을 객체로 구성하여 개발하는 방법입니다. 파이썬은 OOP를 지원하며, 클래스와 객체를 사용할 수 있습니다.\n\n## 클래스와 객체\n- **클래스**: 객체를 생성하기 위한 청사진\n- **객체**: 클래스의 인스턴스\n\n## 클래스 정의\n```python\nclass Dog:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def bark(self):\n        return \"Woof!\"\n\n# 객체 생성\nmy_dog = Dog(\"Buddy\", 3)\n\n# 속성 및 메소드 접근\nprint(my_dog.name)    # \"Buddy\"\nprint(my_dog.bark())  # \"Woof!\"\n```",
    "resources": [
      {
        "title": "파이썬 클래스 - 공식 문서",
        "url": "https://docs.python.org/ko/3/tutorial/classes.html"
      }
    ],
    "challenges": [
      {
        "title": "클래스 설계",
        "description": "은행 계좌를 나타내는 클래스를 설계하고, 입금, 출금, 잔액 조회 기능을 구현하세요."
      }
    ]
  },
  "classes": {
    "title": "클래스",
    "description": "객체의 청사진",
    "content": "# 파이썬 클래스\n\n클래스는 객체를 생성하기 위한 템플릿입니다. 속성(데이터)과 메소드(행동)를 정의할 수 있습니다.\n\n## 클래스 정의\n```python\nclass Car:\n    def __init__(self, make, model):\n        self.make = make\n        self.model = model\n\n    def start_engine(self):\n        return \"Engine started\"\n\n# 객체 생성\nmy_car = Car(\"Toyota\", \"Corolla\")\n\n# 속성 및 메소드 접근\nprint(my_car.make)         # \"Toyota\"\nprint(my_car.start_engine())  # \"Engine started\"\n```",
    "resources": [
      {
        "title": "파이썬 클래스 - W3Schools",
        "url": "https://www.w3schools.com/python/python_classes.asp"
      }
    ],
    "challenges": [
      {
        "title": "클래스 생성",
        "description": "사람을 나타내는 클래스를 만들고, 이름과 나이를 속성으로, 인사말을 반환하는 메소드를 추가하세요."
      }
    ]
  },
  "inheritance": {
    "title": "상속",
    "description": "기존 클래스 확장",
    "content": "# 상속\n\n상속은 기존 클래스의 속성과 메소드를 새로운 클래스에서 재사용할 수 있게 합니다.\n\n## 상속 예제\n```python\nclass Animal:\n    def __init__(self, name):\n        self.name = name\n\n    def speak(self):\n        pass\n\nclass Dog(Animal):\n    def speak(self):\n        return \"Woof!\"\n\nclass Cat(Animal):\n    def speak(self):\n        return \"Meow!\"\n\n# 객체 생성\ndog = Dog(\"Buddy\")\ncat = Cat(\"Whiskers\")\n\nprint(dog.name, dog.speak())  # \"Buddy Woof!\"\nprint(cat.name, cat.speak())  # \"Whiskers Meow!\"\n```",
    "resources": [
      {
        "title": "파이썬 상속 - W3Schools",
        "url": "https://www.w3schools.com/python/python_inheritance.asp"
      }
    ],
    "challenges": [
      {
        "title": "상속 활용",
        "description": "도형 클래스를 상속받아 원과 사각형 클래스를 만들고, 각각의 넓이를 계산하는 메소드를 구현하세요."
      }
    ]
  },
  "modules": {
    "title": "모듈과 패키지",
    "description": "코드 구성과 재사용",
    "content": "# 모듈과 패키지\n\n모듈은 파이썬 파일(.py)로, 함수, 클래스, 변수를 포함할 수 있습니다. 패키지는 모듈의 집합입니다.\n\n## 모듈 가져오기\n```python\nimport math\nprint(math.pi)  # 3.141592653589793\n\n# 특정 함수 가져오기\nfrom math import sqrt\nprint(sqrt(16))  # 4.0\n\n# 별칭 사용\nimport numpy as np\n```\n\n## 패키지\n패키지는 `__init__.py` 파일을 포함한 디렉토리입니다.\n\n```bash\nmy_package/\n    __init__.py\n    module1.py\n    module2.py\n```\n\n```python\nfrom my_package import module1\n```",
    "resources": [
      {
        "title": "파이썬 모듈 - 공식 문서",
        "url": "https://docs.python.org/ko/3/tutorial/modules.html"
      }
    ],
    "challenges": [
      {
        "title": "모듈 작성",
        "description": "간단한 수학 연산을 수행하는 모듈을 작성하고, 다른 파일에서 가져와 사용하세요."
      }
    ]
  },
  "module-basics": {
    "title": "모듈 기초",
    "description": "모듈 가져오기와 사용",
    "content": "# 모듈 기초\n\n## 모듈이란?\n모듈은 파이썬 코드를 포함하는 파일입니다. 다른 파일에서 `import`하여 사용할 수 있습니다.\n\n## 예제\n1. `my_module.py` 파일 생성:\n```python\ndef greet(name):\n    return f\"Hello, {name}!\"\n```\n2. 다른 파일에서 사용:\n```python\nimport my_module\nprint(my_module.greet(\"Alice\"))  # \"Hello, Alice!\"\n```",
    "resources": [
      {
        "title": "파이썬 모듈 사용법",
        "url": "https://wikidocs.net/29"
      }
    ],
    "challenges": [
      {
        "title": "모듈 활용",
        "description": "간단한 유틸리티 함수를 포함한 모듈을 작성하고, 메인 프로그램에서 사용하세요."
      }
    ]
  },
  "packages": {
    "title": "패키지",
    "description": "다수의 모듈 관리",
    "content": "# 패키지\n\n패키지는 모듈을 그룹화하여 관리하는 디렉토리입니다. `__init__.py` 파일이 있어야 패키지로 인식됩니다.\n\n## 패키지 구조\n```bash\nmy_package/\n    __init__.py\n    subpackage1/\n        __init__.py\n        module1.py\n    subpackage2/\n        __init__.py\n        module2.py\n```\n\n## 패키지에서 모듈 가져오기\n```python\nfrom my_package.subpackage1 import module1\n```",
    "resources": [
      {
        "title": "파이썬 패키지 - 공식 문서",
        "url": "https://docs.python.org/ko/3/tutorial/modules.html#packages"
      }
    ],
    "challenges": [
      {
        "title": "패키지 생성",
        "description": "간단한 패키지를 생성하고, 그 안의 모듈을 사용하는 프로그램을 작성하세요."
      }
    ]
  },
  "pip": {
    "title": "pip",
    "description": "패키지 설치 및 관리",
    "content": "# pip\n\npip는 파이썬 패키지 관리자로, 외부 라이브러리를 설치하고 관리할 수 있습니다.\n\n## 기본 명령어\n```bash\n# 패키지 설치\npip install package_name\n\n# 패키지 제거\npip uninstall package_name\n\n# 설치된 패키지 목록\npip list\n\n# requirements.txt로부터 설치\npip install -r requirements.txt\n```",
    "resources": [
      {
        "title": "pip 공식 문서",
        "url": "https://pip.pypa.io/en/stable/"
      }
    ],
    "challenges": [
      {
        "title": "패키지 설치",
        "description": "requests 패키지를 설치하고, 간단한 HTTP 요청을 보내는 프로그램을 작성하세요."
      }
    ]
  },
  "advanced": {
    "title": "고급 주제",
    "description": "고급 파이썬 기능",
    "content": "# 고급 주제\n\n파이썬의 고급 기능에는 예외 처리, 제너레이터, 데코레이터 등이 있습니다. 이들은 코드의 효율성과 가독성을 높이는 데 유용합니다.\n\n## 예외 처리\n```python\ntry:\n    result = 10 / 0\nexcept ZeroDivisionError:\n    print(\"Cannot divide by zero\")\nfinally:\n    print(\"Execution completed\")\n```\n\n## 제너레이터\n```python\ndef countdown(n):\n    while n > 0:\n        yield n\n        n -= 1\n\nfor i in countdown(5):\n    print(i)  # 5, 4, 3, 2, 1\n```\n\n## 데코레이터\n```python\ndef timer(func):\n    def wrapper(*args, **kwargs):\n        start = time.time()\n        result = func(*args, **kwargs)\n        end = time.time()\n        print(f\"Execution time: {end - start}\")\n        return result\n    return wrapper\n\n@timer\ndef slow_function():\n    time.sleep(2)\n\nslow_function()\n```",
    "resources": [
      {
        "title": "파이썬 고급 주제 - Real Python",
        "url": "https://realpython.com/tutorials/advanced/"
      }
    ],
    "challenges": [
      {
        "title": "고급 기능 활용",
        "description": "데코레이터를 사용하여 함수의 실행 시간을 측정하는 프로그램을 작성하세요."
      }
    ]
  },
  "exceptions": {
    "title": "예외 처리",
    "description": "오류 처리 메커니즘",
    "content": "# 예외 처리\n\n예외 처리는 프로그램 실행 중 발생할 수 있는 오류를 관리하는 방법입니다.\n\n## 기본 구조\n```python\ntry:\n    # 오류가 발생할 수 있는 코드\n    result = 10 / 0\nexcept ZeroDivisionError:\n    # 오류 처리\n    print(\"Cannot divide by zero\")\nelse:\n    # 오류가 발생하지 않았을 때 실행\n    print(\"Division successful\")\nfinally:\n    # 항상 실행\n    print(\"Execution completed\")\n```\n\n## 사용자 정의 예외\n```python\nclass MyCustomError(Exception):\n    pass\n\nraise MyCustomError(\"Something went wrong\")\n```",
    "resources": [
      {
        "title": "파이썬 예외 처리 - 공식 문서",
        "url": "https://docs.python.org/ko/3/tutorial/errors.html"
      }
    ],
    "challenges": [
      {
        "title": "예외 처리 구현",
        "description": "파일을 읽는 함수에서 파일이 없을 경우 예외를 처리하는 코드를 작성하세요."
      }
    ]
  },
  "generators": {
    "title": "제너레이터",
    "description": "반복자 및 제너레이터 함수",
    "content": "# 제너레이터\n\n제너레이터는 메모리를 효율적으로 사용하며, 필요한 시점에 값을 생성합니다.\n\n## 제너레이터 함수\n```python\ndef fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n):\n        yield a\n        a, b = b, a + b\n\nfor num in fibonacci(10):\n    print(num)\n```\n\n## 제너레이터 표현식\n```python\nsquares = (x**2 for x in range(10))\nfor square in squares:\n    print(square)\n```",
    "resources": [
      {
        "title": "파이썬 제너레이터 - Real Python",
        "url": "https://realpython.com/introduction-to-python-generators/"
      }
    ],
    "challenges": [
      {
        "title": "제너레이터 활용",
        "description": "무한 제너레이터를 사용하여 소수를 생성하는 함수를 작성하세요."
      }
    ]
  },
  "decorators": {
    "title": "데코레이터",
    "description": "함수와 메서드 확장",
    "content": "# 데코레이터\n\n데코레이터는 함수나 메서드의 기능을 확장하거나 수정하는 데 사용됩니다.\n\n## 데코레이터 정의\n```python\ndef my_decorator(func):\n    def wrapper(*args, **kwargs):\n        print(\"Before function call\")\n        result = func(*args, **kwargs)\n        print(\"After function call\")\n        return result\n    return wrapper\n\n@my_decorator\ndef say_hello():\n    print(\"Hello!\")\n\nsay_hello()\n# Before function call\n# Hello!\n# After function call\n```",
    "resources": [
      {
        "title": "파이썬 데코레이터 - Real Python",
        "url": "https://realpython.com/primer-on-python-decorators/"
      }
    ],
    "challenges": [
      {
        "title": "데코레이터 구현",
        "description": "함수의 실행 횟수를 카운트하는 데코레이터를 작성하세요."
      }
    ]
  }
}